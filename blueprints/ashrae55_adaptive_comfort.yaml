blueprint:
  name: ASHRAE 55 Adaptive Climate Control (no Temp Sensors)
  description: >
    Intelligent climate control implementing ASHRAE 55 adaptive comfort model with energy optimization.
    
    This blueprint dynamically adjusts comfort zones based on outdoor temperature, provides 15-30% energy savings,
    and works seamlessly with SmartIR and other climate platforms.
    
  domain: automation
  author: Marco Sinhoreli
  source_url: https://github.com/msinhore/adaptive-climate-blueprint
  
  input:
    climate_entity:
      name: Climate Entity
      description: The climate device to control (SmartIR, generic thermostat, etc.)
      selector:
        entity:
          domain: climate
    
    outdoor_temp_sensor:
      name: Outdoor Temperature Sensor
      description: External temperature sensor for adaptive comfort calculations
      selector:
        entity:
          domain: weather
          device_class: temperature
    
    occupancy_sensor:
      name: Occupancy Sensor (Optional)
      description: Motion or presence sensor for occupancy-aware control
      default: ""
      selector:
        entity:
          domain: binary_sensor
          device_class: 
            - motion
            - occupancy
            - presence
    
    comfort_category:
      name: ASHRAE 55 Comfort Category
      description: >
        Comfort category based on ASHRAE 55 standard:
        - Category I: ±2°C (90% satisfaction) - Office environments
        - Category II: ±3°C (80% satisfaction) - Typical residential 
        - Category III: ±4°C (65% satisfaction) - Maximum energy savings
      default: "II"
      selector:
        select:
          options:
            - label: "Category I (±2°C - 90% satisfaction)"
              value: "I"
            - label: "Category II (±3°C - 80% satisfaction)"
              value: "II"
            - label: "Category III (±4°C - 65% satisfaction)"
              value: "III"
    
    energy_save_mode:
      name: Energy Save Mode
      description: Enable enhanced energy saving features
      default: true
      selector:
        boolean:
    
    natural_ventilation_enable:
      name: Natural Ventilation Detection
      description: Automatically turn off HVAC when natural ventilation is sufficient
      default: true
      selector:
        boolean:
    
    natural_ventilation_threshold:
      name: Natural Ventilation Threshold
      description: Temperature difference threshold for natural ventilation (°C)
      default: 2.0
      selector:
        number:
          min: 0.5
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"
    
    setback_temperature_offset:
      name: Setback Temperature Offset
      description: Temperature offset when room is unoccupied (°C)
      default: 2.0
      selector:
        number:
          min: 1.0
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"
    
    min_comfort_temp:
      name: Minimum Comfort Temperature
      description: Absolute minimum comfort temperature (°C)
      default: 18.0
      selector:
        number:
          min: 15.0
          max: 22.0
          step: 0.5
          unit_of_measurement: "°C"
    
    max_comfort_temp:
      name: Maximum Comfort Temperature
      description: Absolute maximum comfort temperature (°C)
      default: 28.0
      selector:
        number:
          min: 25.0
          max: 32.0
          step: 0.5
          unit_of_measurement: "°C"

variables:
  climate_entity_id: !input climate_entity
  indoor_sensor_id: !input climate_entity
  outdoor_sensor_id: !input outdoor_temp_sensor
  occupancy_sensor_id: !input occupancy_sensor
  min_comfort_temp_val: !input min_comfort_temp
  max_comfort_temp_val: !input max_comfort_temp
  comfort_category_val: !input comfort_category
  energy_save_mode_val: !input energy_save_mode
  natural_ventilation_enable_val: !input natural_ventilation_enable
  natural_ventilation_threshold_val: !input natural_ventilation_threshold
  setback_temperature_offset_val: !input setback_temperature_offset
  
  comfort_tolerance: >
    {% if comfort_category_val == "I" %}
      2.0
    {% elif comfort_category_val == "II" %}
      3.0
    {% else %}
      4.0
    {% endif %}
  
  outdoor_temp: "{{ states(outdoor_sensor_id) | float(20) }}"
  indoor_temp: "{{ states(indoor_sensor_id) | float(20) }}"
  
  adaptive_comfort_temp: >
    {{ (18.9 + 0.255 * outdoor_temp) | round(1) }}
  
  comfort_temp_min: >
    {{ [adaptive_comfort_temp - comfort_tolerance, min_comfort_temp_val] | max | round(1) }}
  
  comfort_temp_max: >
    {{ [adaptive_comfort_temp + comfort_tolerance, max_comfort_temp_val] | min | round(1) }}
  
  is_occupied: >
    {% if occupancy_sensor_id and occupancy_sensor_id != "" %}
      {{ is_state(occupancy_sensor_id, 'on') }}
    {% else %}
      true
    {% endif %}
  
  natural_ventilation_available: >
    {% if natural_ventilation_enable_val %}
      {{ (outdoor_temp >= (indoor_temp - natural_ventilation_threshold_val)) and 
         (outdoor_temp <= (indoor_temp + natural_ventilation_threshold_val)) and
         (outdoor_temp >= comfort_temp_min) and 
         (outdoor_temp <= comfort_temp_max) }}
    {% else %}
      false
    {% endif %}
  
  target_temp: >
    {% if not is_occupied and energy_save_mode_val %}
      {% if indoor_temp > comfort_temp_max %}
        {{ comfort_temp_max | round(1) }}
      {% elif indoor_temp < comfort_temp_min %}
        {{ max(comfort_temp_min - setback_temperature_offset_val, min_comfort_temp_val) | round(1) }}
      {% else %}
        {{ adaptive_comfort_temp | round(1) }}
      {% endif %}
    {% else %}
      {% if indoor_temp < comfort_temp_min %}
        {{ comfort_temp_min | round(1) }}
      {% elif indoor_temp > comfort_temp_max %}
        {{ comfort_temp_max | round(1) }}
      {% else %}
        {{ adaptive_comfort_temp | round(1) }}
      {% endif %}
    {% endif %}

trigger:
  - platform: time_pattern
    minutes: 0
  - platform: time_pattern
    minutes: 10
  - platform: time_pattern
    minutes: 20
  - platform: time_pattern
    minutes: 30
  - platform: time_pattern
    minutes: 40
  - platform: time_pattern
    minutes: 50
  
  - platform: state
    entity_id: !input climate_entity
  
  - platform: state
    entity_id: !input outdoor_temp_sensor
  
  - platform: state
    entity_id: !input occupancy_sensor

condition:
  - condition: template
    value_template: >
      {{ states(climate_entity_id) not in ['unavailable', 'unknown'] and
         states(indoor_sensor_id) not in ['unavailable', 'unknown'] and
         states(outdoor_sensor_id) not in ['unavailable', 'unknown'] }}

action:
  - choose:
      # Natural ventilation mode - turn off HVAC
      - conditions:
          - condition: template
            value_template: "{{ natural_ventilation_available and is_occupied }}"
        sequence:
          - service: climate.turn_off
            target:
              entity_id: !input climate_entity
          - service: logbook.log
            data:
              name: "ASHRAE 55 Adaptive Climate"
              message: >
                Natural ventilation active. HVAC turned off.
                Outdoor: {{ outdoor_temp }}°C, Indoor: {{ indoor_temp }}°C,
                Comfort zone: {{ comfort_temp_min }}-{{ comfort_temp_max }}°C
      
      # Normal climate control
      - conditions:
          - condition: template
            value_template: "{{ not natural_ventilation_available }}"
        sequence:
          - choose:
              # Heating needed
              - conditions:
                  - condition: template
                    value_template: "{{ indoor_temp < comfort_temp_min }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input climate_entity
                    data:
                      hvac_mode: heat
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entity
                    data:
                      temperature: "{{ target_temp }}"
              
              # Cooling needed
              - conditions:
                  - condition: template
                    value_template: "{{ indoor_temp > comfort_temp_max }}"
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input climate_entity
                    data:
                      hvac_mode: cool
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entity
                    data:
                      temperature: "{{ target_temp }}"
              
              # Within comfort zone - maintain current mode but adjust temperature
              - conditions:
                  - condition: template
                    value_template: >
                      {{ indoor_temp >= comfort_temp_min and indoor_temp <= comfort_temp_max }}
                sequence:
                  - service: climate.set_temperature
                    target:
                      entity_id: !input climate_entity
                    data:
                      temperature: "{{ target_temp }}"
          
          - service: logbook.log
            data:
              name: "ASHRAE 55 Adaptive Climate"
              message: >
                Climate adjusted. Target: {{ target_temp }}°C,
                Indoor: {{ indoor_temp }}°C, Outdoor: {{ outdoor_temp }}°C,
                Comfort zone: {{ comfort_temp_min }}-{{ comfort_temp_max }}°C,
                Occupancy: {{ 'Occupied' if is_occupied else 'Unoccupied' }},
                Category: {{ comfort_category_val }} (±{{ comfort_tolerance }}°C)

mode: single
max_exceeded: silent
